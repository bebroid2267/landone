import { NextRequest, NextResponse } from 'next/server'
import fetch from 'node-fetch'

/**
 * Telegram Bot Configuration
 * 
 * –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞:
 * 1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram
 * 2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env.local –∫–∞–∫ TELEGRAM_BOT_TOKEN
 * 3. –£–∑–Ω–∞–π—Ç–µ Chat ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot –∏–ª–∏ API)
 * 4. –î–æ–±–∞–≤—å—Ç–µ Chat ID –≤ .env.local –∫–∞–∫ TELEGRAM_CHAT_ID
 * 
 * –ü—Ä–∏–º–µ—Ä .env.local:
 * TELEGRAM_BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrsTUVwxyz
 * TELEGRAM_CHAT_ID=123456789
 */
const TOKEN = process.env.TELEGRAM_BOT_TOKEN || '123456:ABC-DEF...'
const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '123456789'

export async function POST(request: NextRequest) {
  console.log('üöÄ API /telegram-send POST called')
  
  try {
    console.log('üì• Reading request body...')
    const body = await request.json()
    console.log('üìÑ Request body:', body)
    
    const { 
      email, 
      monthlyAdSpend, 
      phoneNumber, 
      companyWebsite, 
      formType = 'talk_to_expert' 
    } = body

    console.log('üîç Validating required fields...')
    // Validate required fields
    if (!email || !monthlyAdSpend || !phoneNumber) {
      console.log('‚ùå Missing required fields')
      return NextResponse.json(
        { error: 'Missing required fields: email, monthlyAdSpend, phoneNumber' }, 
        { status: 400 }
      )
    }

    console.log('üìß Validating email format...')
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log('‚ùå Invalid email format')
      return NextResponse.json(
        { error: 'Invalid email format' }, 
        { status: 400 }
      )
    }

    console.log('‚úÖ All validations passed, preparing Telegram message...')
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const text = `üí¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>\n`
               + `üë§ <b>–ò–º—è/Email:</b> ${email}\n`
               + `üìß <b>Email:</b> ${email}\n`
               + `üí∞ <b>–ú–µ—Å—è—á–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç:</b> ${monthlyAdSpend}\n`
               + `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}\n`
               + `üåê <b>–í–µ–±-—Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏:</b> ${companyWebsite || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`
               + `üìù <b>–¢–∏–ø —Ñ–æ—Ä–º—ã:</b> ${formType}`

    console.log('üì§ Sending message to Telegram...')
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        chat_id: CHAT_ID, 
        text, 
        parse_mode: 'HTML' 
      })
    })

    const telegramResult = await telegramResponse.json()
    console.log('üì• Telegram API response:', telegramResult)

    if (!telegramResponse.ok) {
      console.error('‚ùå Telegram API error:', telegramResult)
      return NextResponse.json(
        { error: 'Failed to send message to Telegram' }, 
        { status: 500 }
      )
    }

    console.log('‚úÖ Message sent to Telegram successfully')
    return NextResponse.json({ 
      message: 'Form submitted successfully and sent to Telegram',
      telegramMessageId: telegramResult.result?.message_id
    }, { status: 200 })

  } catch (error) {
    console.error('‚ùå API Error in telegram-send endpoint:', error)
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}