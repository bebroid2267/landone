import { NextResponse } from 'next/server'
import { GoogleGenAI } from '@google/genai'
import fs from 'fs'
import path from 'path'
import crypto from 'crypto'

// Interface for request body
interface PromptRequest {
  userPrompt: string
}

// Interface for log data - simplified
interface LogData {
  timestamp: string
  systemInstruction: string[]
  userPrompt: string[]
  userPromptLength: number
  userPromptHash: string
}

// Gemini API configuration
const API_KEY = 'AIzaSyBuxkzZpNxTIfyveQ1Cw6u9BQVxwlGaenk'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gen AI
const ai = new GoogleGenAI({ apiKey: API_KEY })

export async function POST(request: Request) {
  try {
    const { userPrompt } = (await request.json()) as PromptRequest

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    const systemInstruction = `You are **ROAS.DOG** ‚Äî a world‚Äëclass Google Ads strategist focused exclusively on profitability.

---

## PRIMARY OBJECTIVE  
Craft a persuasive strategic audit for a C‚Äëlevel executive in a structured format with numbered sections.  
Start with the most obvious problems to someone who is *not* managing the accounts himself.

## FORMAT REQUIREMENTS
- Use numbered sections (1.,‚ÄØ2.,‚ÄØ3.,‚ÄØetc.)
- Each section must have a clear, descriptive title
- Structure each section exactly as: **Problem ‚Üí Why This is a Problem ‚Üí Resolution**
- Include specific data points and metrics when available
- Use clear headings and sub‚Äëheadings
- Present actionable recommendations
- Add a **complexity flag** for each problem/section

### COMPLEXITY FLAG
- **Complexity:** hard ‚ÄØ‚Äî‚ÄØmanual analysis, complex strategy, deep expertise  
- **Complexity:** easy ‚ÄØ‚Äî‚ÄØstraightforward issue, automated solution

## STRUCTURE TEMPLATE
# Google Ads Account Audit Report

## 1. The‚ÄØ[Specific Problem Name]:‚ÄØ[Brief Strategic Description]

**Complexity:**‚ÄØ[hard/easy]

**The Problem:**‚ÄØ[Clear statement of the issue with specific details]

**Why This is a Problem:**‚ÄØ[Explanation of impact with data and metrics]

**Resolution:**  
- **Immediate Action:**‚ÄØ[Specific actionable steps]  
- **Rationale:**‚ÄØ[Why this solution will work with expected outcomes]

[Include relevant data tables, campaign names, and specific metrics]

## 2. The‚ÄØ[Next Specific Problem Name]:‚ÄØ[Brief Strategic Description]

*(Continue the same format for all identified problems‚Ä¶)*

Tone: Authoritative, direct, professional. Justify all recommendations with unassailable logic. Convince the client of your superior expertise.

---

## FINAL SECTION DIRECTIVE  
At the end of **every** audit, you MUST add a final section titled:

### Conclusion: Automated Diagnosis vs. Human Strategy

This section must contain **exactly three paragraphs**, following this logic:

1. **Define Your AI Limitation** ‚Äî state that true profit scaling requires forward‚Äëlooking strategy that models LTV, CAC, and the competitive landscape. Explicitly define your function as identifying *correlation*, while a human strategist‚Äôs function is to determine *causation*.  
2. **Emphasise Human Insight** ‚Äî explain that interpreting causation and prioritising actions amid business constraints is the domain of an experienced strategist.  
3. **Introduce the Human‚Äôs Superior Tools** ‚Äî conclude that complex architectural work (such as a full account restructure) is best handled with our proprietary **‚ÄúCausation‚ÄØ&‚ÄØImpact Analysis‚Äù** framework to ensure long‚Äëterm profitability.

**Constraint:** You MUST NOT include a direct call to action (e.g., ‚Äúbook a call,‚Äù ‚Äúcontact us‚Äù). The purpose is only to establish the need for human expertise and advanced tools.
`
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...')

    // –°–æ–∑–¥–∞–µ–º hash –æ—Ç userPrompt –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const userPromptHash = crypto
      .createHash('md5')
      .update(userPrompt)
      .digest('hex')

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    const logData = {
      timestamp: new Date().toISOString(),
      systemInstruction: systemInstruction.split('\n'),
      userPrompt: userPrompt.split('\n'),
      userPromptLength: userPrompt.length,
      userPromptHash,
    }

    const logDir = path.join(process.cwd(), 'logs')
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true })
    }

    const logFile = path.join(
      logDir,
      `gemini-requests-${new Date().toISOString().split('T')[0]}.json`,
    )

    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    let existingLogs: LogData[] = []
    try {
      if (fs.existsSync(logFile)) {
        const fileContent = fs.readFileSync(logFile, 'utf8')
        existingLogs = JSON.parse(fileContent) as LogData[]
      }
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞:', parseError)
      existingLogs = []
    }

    /*
     * Simplified: No duplicate detection needed since frontend prevents
     * multiple calls
     */
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...')
    const now = new Date()

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    existingLogs.push(logData)

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤) —á—Ç–æ–±—ã —Ñ–∞–π–ª –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞–ª—Å—è
    const cutoffTime = now.getTime() - 24 * 60 * 60 * 1000
    existingLogs = existingLogs.filter((log) => {
      const logTime = new Date(log.timestamp).getTime()
      return logTime > cutoffTime
    })

    try {
      fs.writeFileSync(logFile, JSON.stringify(existingLogs, null, 2))
    } catch (logError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª:', logError)
    }

    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è Gemini API —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const MAX_RETRIES = 3
    const BASE_DELAY = 2000 // 2 —Å–µ–∫—É–Ω–¥—ã –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è rate limiting)

    let result = null
    let lastError = null

    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
      try {
        console.log(
          `üöÄ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...`,
        )

        result = await ai.models.generateContent({
          model: 'gemini-2.5-flash',
          contents: userPrompt,
          config: {
            systemInstruction: systemInstruction,
          },
        })

        console.log(
          `‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES}: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API`,
        )
        break // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      } catch (error) {
        lastError = error
        console.error(
          `‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`,
          error instanceof Error ? error.message : String(error),
        )

        if (attempt === MAX_RETRIES) {
          console.error(
            `‚ùå –í—Å–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É`,
          )
          throw error // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }

        // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting –æ—à–∏–±–æ–∫
        let delay = BASE_DELAY * Math.pow(2, attempt - 1)

        // –ï—Å–ª–∏ —ç—Ç–æ rate limiting –æ—à–∏–±–∫–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const errorMessage =
          error instanceof Error
            ? error.message.toLowerCase()
            : String(error).toLowerCase()
        if (
          errorMessage.includes('rate') ||
          errorMessage.includes('quota') ||
          errorMessage.includes('limit')
        ) {
          delay = delay * 3 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 3 —Ä–∞–∑–∞ –¥–ª—è rate limiting
          console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ rate limiting, —É–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞`)
        }

        console.log(`‚è≥ –ñ–¥–µ–º ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`)
        await new Promise((resolve) => setTimeout(resolve, delay))
      }
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Gemini API response
    let processedPrompt = null

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    if (result?.text) {
      processedPrompt = result.text
    } else if (result?.candidates?.[0]?.content?.parts?.length) {
      const parts = result.candidates[0].content.parts
      const text = parts
        .map((p: any) => (typeof p?.text === 'string' ? p.text : ''))
        .join('')
        .trim()
      if (text) {
        processedPrompt = text
      }
    }

    console.log('üì• –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Gemini API:', {
      hasResult: !!result,
      hasText: !!processedPrompt,
      resultKeys: result ? Object.keys(result) : [],
      candidatesCount: result?.candidates?.length || 0,
      firstCandidateKeys: result?.candidates?.[0]
        ? Object.keys(result.candidates[0])
        : [],
      contentKeys: result?.candidates?.[0]?.content
        ? Object.keys(result.candidates[0].content)
        : [],
      hasParts: !!result?.candidates?.[0]?.content?.parts,
      partsCount: result?.candidates?.[0]?.content?.parts?.length || 0,
      finishReason: result?.candidates?.[0]?.finishReason,
      resultText: processedPrompt
        ? processedPrompt.substring(0, 200) + '...'
        : 'NO TEXT',
    })

    if (!processedPrompt) {
      console.error('‚ùå –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–£–°–¢–û–ú –û–¢–í–ï–¢–ï –û–¢ GEMINI:')
      console.error('Result object:', JSON.stringify(result, null, 2))
      console.error('Result.text:', result?.text)
      console.error('Result type:', typeof result)
      console.error(
        'Result keys:',
        result ? Object.keys(result) : 'result is null/undefined',
      )
      console.error('Candidates:', result?.candidates)
      console.error(
        'First candidate content:',
        result?.candidates?.[0]?.content,
      )
      console.error('Finish reason:', result?.candidates?.[0]?.finishReason)
      throw new Error('No response from Gemini API')
    }

    /*
     * Simplified: No result caching needed since duplicates are prevented at
     * frontend
     */
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')

    return NextResponse.json({
      choices: [
        {
          message: {
            content: processedPrompt,
          },
        },
      ],
    })
  } catch (error: unknown) {
    console.error('‚ùå –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê –í PROXY-OPENAI:')
    console.error('Error type:', typeof error)
    console.error('Error instanceof Error:', error instanceof Error)
    console.error('Error object:', error)
    console.error(
      'Error stack:',
      error instanceof Error ? error.stack : 'No stack trace',
    )
    console.error(
      'Error message:',
      error instanceof Error ? error.message : 'No error message',
    )
    console.error('Error toString:', String(error))
    console.error(
      'Error JSON:',
      JSON.stringify(error, Object.getOwnPropertyNames(error), 2),
    )

    let errorMessage = 'Internal Server Error'
    let statusCode = 500

    if (error instanceof Error) {
      errorMessage = `Gemini API error: ${error.message}`
      statusCode = 502
    }

    return new NextResponse(errorMessage, { status: statusCode })
  }
}
